name: tmate
'on':
  workflow_dispatch:
    inputs:
      runs-on:
        description: jobs.main.runs-on
        required: false
        default: ubuntu-22.04
        type: choice
        options:
          # - ubuntu-18.04
          - ubuntu-20.04
          - ubuntu-22.04
          # - macos-10.15
          # - macos-11
          - macos-12
          - macos-13
          - windows-2019
          - windows-2022
jobs:
  main:
    timeout-minutes: 30
    name: 'main-${{ github.event.inputs.runs-on }}'
    runs-on: '${{ github.event.inputs.runs-on }}'
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      WSLENV: >-
        CI:V:YP_LOG_BOOTSTRAP:YP_PRINTENV_BOOTSTRAP:GH_TOKEN:GH_USERNAME:YP_TRANSCRYPT_PASSWORD:SLACK_WEBHOOK:SLACK_CHANNEL:YP_CI_BREW_INSTALL:YP_CI_STATUS
      WSLUSER: github
      WSLGROUP: github
    steps:
      - name: yplatform/bin/github-checkout
        shell: bash
        run: >
          set -x

          #!/usr/bin/env bash

          set -euo pipefail


          HOME_REAL=$(eval echo "~$(id -u -n)")

          [[ "${HOME}" = "${HOME_REAL}" ]] || {
              >&2 echo "$(date +"%H:%M:%S")" "[WARN] \$HOME is overriden to ${HOME}."
              >&2 echo "$(date +"%H:%M:%S")" "[INFO] Resetting \$HOME to ${HOME_REAL}..."
              export HOME=${HOME_REAL}
          }


          [[ -n "${GITHUB_REPOSITORY:-}" ]] || {
              >&2 echo "$(date +"%H:%M:%S")" "[ERR ] GITHUB_REPOSITORY is undefined."
              exit 1
          }


          [[ -n "${GITHUB_REF:-}" ]] || {
              >&2 echo "$(date +"%H:%M:%S")" "[ERR ] GITHUB_REF is undefined."
              exit 1
          }


          # run with a clean .gitconfig, but restore on exit

          TMP_GITHUB_CHECKOUT=$(mktemp -t yplatform.XXXXXXXXXX)

          touch ${HOME}/.gitconfig

          mv ${HOME}/.gitconfig ${TMP_GITHUB_CHECKOUT}


          function on_exit() {
              mv ${TMP_GITHUB_CHECKOUT} ${HOME}/.gitconfig
          }

          trap on_exit EXIT


          # basic git config

          git config --global core.autocrlf false

          git config --global core.eol lf

          git config --global advice.detachedHead false


          # use https instead of everything else

          # sync with gitconfig/dot.gitconfig.github-https

          git config --global --add url."https://github.com/".insteadOf "https://github.com/" # git canonical https url

          git config --global --add url."https://github.com/".insteadOf "git://github.com/" # git canonical git url

          git config --global --add url."https://github.com/".insteadOf "github://" # github url

          git config --global --add url."https://github.com/".insteadOf "git@github.com:" # git canonical ssh url

          git config --global --add url."https://github.com/".insteadOf "ssh://git@github.com/" # npm package.json's
          canonical git+ssh url # editorconfig-checker-disable-line


          # use github token transparently

          [[ -z "${GITHUB_TOKEN:-}" ]] || {
              BASE64="base64 --wrap 0"
              echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="base64"
              echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="openssl base64 -A"
              echo "" | ${BASE64} >/dev/null 2>&1
              GIT_HTTP_EXTRAHEADER="AUTHORIZATION: basic $(echo -n "x-access-token:${GITHUB_TOKEN}" | ${BASE64})"
              git config --global --add http."https://github.com/".extraheader "${GIT_HTTP_EXTRAHEADER}"
          }


          # use git protocol version 2 if available

          GIT_DEPTH_ARG=

          # NOTE may fail if git-man is not installed

          # ! git config --help | grep -q "wire protocol version 2" || {

          ! grep -q "protocol version 2" $(command -v git) || {
              git config --global --add protocol.version 2
              GIT_DEPTH_ARG="--depth=1"
          }


          # ------------------------------------------------------------------------------


          # clone/fetch

          GIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git

          GIT_BRANCH_ARG=

          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/heads\/}"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/tags\/}"
          fi

          [[ -z "${GITHUB_WORKSPACE:-}" ]] || cd ${GITHUB_WORKSPACE}

          git clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)

          # shellcheck disable=SC2193

          if [[ "${GITHUB_EVENT_NAME:-}" = "pull_request" ]]; then
              git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\/pull\/}
              GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\/pull\/})
              GIT_BRANCH_DEFAULT=$(git ls-remote --symref ${GIT_URL} HEAD | head -1 | sed "s,^ref: refs/heads/,," | sed "s,\s\+HEAD,,")
              GITHUB_REF=refs/heads/${GITHUB_BASE_REF:-${GIT_BRANCH_DEFAULT}}
          fi


          # ------------------------------------------------------------------------------


          # checkout

          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              git checkout -B ${GITHUB_REF#refs\/heads\/} ${GITHUB_SHA:-origin/${GITHUB_REF#refs\/heads\/}}
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              git checkout ${GITHUB_REF}
          else
              set -x
              printenv
              cat ${GITHUB_EVENT_PATH:-/dev/null}
              exit 1
          fi


          # submodules

          git submodule sync --recursive

          git submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}
      - if: ${{ !startsWith(github.event.inputs.runs-on, 'windows') }}
        name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        # disabled due to https://github.com/mxschmitt/action-tmate/issues/69
        # with:
        #   limit-access-to-actor: true
      - if: ${{ startsWith(github.event.inputs.runs-on, 'windows') }}
        name: Set up WSLENV
        shell: bash
        run: |-
          set -x
          GITHUB_WSLENV="$(printenv | grep "^GITHUB" | cut -d"=" -f1 | sort | \
          sed "s|^GITHUB_ENV\$|GITHUB_ENV/p|" | \
          sed "s|^GITHUB_EVENT_PATH\$|GITHUB_EVENT_PATH/p|" | \
          sed "s|^GITHUB_PATH\$|GITHUB_PATH/p|" | \
          sed "s|^GITHUB_WORKSPACE\$|GITHUB_WORKSPACE/p|" | \
          tr "\n" ":")"
          echo "WSLENV=${WSLENV:-}:${GITHUB_WSLENV}" >> ${GITHUB_ENV}
      - if: ${{ startsWith(github.event.inputs.runs-on, 'windows') }}
        name: Install WSL Distribution
        uses: Vampire/setup-wsl@v2
        with:
          distribution: Ubuntu-22.04
          update: 'false'
          wsl-conf: |
            # see https://devblogs.microsoft.com/commandline/automatically-configuring-wsl/
            # see https://github.com/MicrosoftDocs/WSL/blob/master/WSL/wsl-config.md

            # DEFAULTS
            # [automount]
            # enabled = true
            # mountFsTab = true
            # root = /mnt/
            # options =
            # [network]
            # generateHosts = true
            # generateResolvConf = true
            # [interop]
            # enabled = true
            # appendWindowsPath = true

            [automount]
            # see https://devblogs.microsoft.com/commandline/chmod-chown-wsl-improvements/
            # using 2000:2000 because of consistency (UID:GID that TravisCI uses)
            options = "metadata,case=dir,uid=2000,gid=2000,umask=22,fmask=11"

            [interop]
            appendWindowsPath = false

            # see https://github.com/microsoft/WSL/issues/8358#issuecomment-1490561393
            [network]
            nameserver 1.1.1.1
      - if: ${{ startsWith(github.event.inputs.runs-on, 'windows') }}
        name: Set up WSL Distribution
        shell: bash
        run: >-
          set -x

          wsl bash -c "cat /etc/os-release"

          wsl bash -c "sudo addgroup --gid 2000 ${WSLGROUP}"

          wsl bash -c "sudo adduser --uid 2000 --ingroup ${WSLGROUP} --home /home/${WSLUSER} --shell /bin/bash
          --disabled-password --gecos \"Linux user\" ${WSLUSER}"

          wsl bash -c "sudo adduser ${WSLUSER} sudo"

          wsl bash -c "sudo echo \"${WSLUSER} ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers"
      - if: ${{ startsWith(github.event.inputs.runs-on, 'windows') }}
        shell: bash
        run: bin/wsl-bash -c "bin/brew-binutils"
      - if: ${{ startsWith(github.event.inputs.runs-on, 'windows') }}
        shell: bash
        run: bin/wsl-bash -c "bin/brew-binutils"
