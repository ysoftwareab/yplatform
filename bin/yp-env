#!/usr/bin/env bash
#!/usr/bin/env zsh

if [[ -n "${BASH_VERSION:-}" ]]; then
    true
elif [[ -n "${ZSH_VERSION:-}" ]]; then
    true
else
    >&2 echo "yp-env has been loaded in an unsupported shell ${SHELL:-} ."
    return 1
fi

function yp::stacktrace_file() {
    # see https://unix.stackexchange.com/a/453170/61053
    if [[ -n "${BASH_VERSION:-}" ]]; then
        echo "${BASH_SOURCE[1]}"
    elif [[ -n "${ZSH_VERSION:-}" ]]; then
        # shellcheck disable=SC2154
        echo "${funcfiletrace[1]%:*}"
    else
        echo "?file?"
    fi
}

function yp::stacktrace_line() {
    # see https://unix.stackexchange.com/a/453170/61053
    if [[ -n "${BASH_VERSION:-}" ]]; then
        echo "${FUNCNAME[1]}"
    elif [[ -n "${ZSH_VERSION:-}" ]]; then
        echo "${funcfiletrace[1]##*:}"
    else
        echo "?line?"
    fi
}

function yp::stacktrace_func() {
    # see https://unix.stackexchange.com/a/453170/61053
    if [[ -n "${BASH_VERSION:-}" ]]; then
        echo "${FUNCNAME[1]}"
    elif [[ -n "${ZSH_VERSION:-}" ]]; then
        # shellcheck disable=SC2154
        echo "${funcstack[2]}"
    else
        echo "?func?"
    fi
}

function yp::stacktrace() {
    echo "$(yp::stacktrace_file):$(yp::stacktrace_line) $(yp::stacktrace_func)"
}

function yp::executed() {
    if [[ -n "${BASH_VERSION:-}" ]]; then
        for f in "${FUNCNAME[@]}"; do
            case "${f}" in
                main)
                    return 0
                    ;;
                source)
                    return 1
                    ;;
                *)
                    ;;
            esac
        done
    elif [[ -n "${ZSH_VERSION:-}" ]]; then
        # shellcheck disable=SC2154
        for f in "${funcstack[@]}"; do
            if [[ "${f}" =~ / ]]; then
                return 1
            fi
        done
        return 0
    else
        exit 1
    fi
}

function yp::sourced() {
    yp::executed || return 0
    return 1
}

function yp::env() {
    source ${YP_ENV:-${YP_DIR}/bin/yp-env}
}

function yp::env_force() {
    source ${YP_ENV:-${YP_DIR}/bin/yp-env} --force
}

# PATH FUNCTIONS ---------------------------------------------------------------

function yp::path() {
    export PATH="$1"
    export PATH=$(echo "${PATH}" | sed "s|^:||" | sed "s|:$||")
    hash -r
}

function yp::path_prepend() {
    echo ":${PATH}:" | grep -q ":$1:" || yp::path "$1:${PATH}"
}

function yp::path_prepend_after() {
    if echo ":${PATH}:" | grep -q ":$2:"; then
        yp::path "$(echo "${PATH}" | sed "s/:$2:/:$2:$1:/")"
    else
        yp::path_prepend "$1"
    fi
}

function yp::path_append() {
    echo ":${PATH}:" | grep -q ":$1:" || yp::path "${PATH}:$1"
}

function yp::path_append_before() {
    if echo ":${PATH}:" | grep -q ":$2:"; then
        yp::path "$(echo "${PATH}" | sed "s/:$2:/:$1:$2:/")"
    else
        yp::path_append "$1"
    fi
}

# SMART NVM INSTALL ------------------------------------------------------------

# nvm install --reinstall-packages-from=current, including npm
function yp::nvm_install() {
    local NODE=$(command -v node 2>/dev/null || true)
    local NODE_VSN="$(${NODE:-true} --version)"
    local NPM=$(command -v npm 2>/dev/null || true)
    local NPM_VSN="$(${NPM:-npm} --version)"

    [[ "$(nvm which current)" = "${NODE}" ]] || {
        # defensive, because I can't see a simple way to assign the above variables via 'nvm exec'
        >&2 echo "Expected NODE=${NODE} to be the same as 'nvm which current' $(nvm which current) ."
        return 1
    }

    local NODE_VSN_NVM="$(nvm version current)"

    [[ -n "${NODE}" ]] || {
        >&2 echo "No current node detected. Falling back to vanilla 'nvm install'."
        nvm install "$@"
        return 0
    }
    >&2 echo "Current NODE=${NODE} NODE_VSN=${NODE_VSN} NODE_VSN_NVM=${NODE_VSN_NVM} ."
    >&2 echo "Current NPM=${NPM} NPM_VSN=${NPM_VSN} ."
    nvm install "$@" --reinstall-package-from=${NODE_VSN_NVM}
    hash -r
    >&2 echo "Post-nvm NODE=$(command -v node 2>/dev/null || true) NODE_VSN=$(node --version) ."
    >&2 echo "Post-nvm NPM=$(command -v npm 2>/dev/null || true) NPM_VSN=$(npm --version) ."

    [[ "$(npm --version)" = "${NPM_VSN}" ]] || {
        npm install --silent -g npm@${NPM_VSN}
        hash -r
        >&2 echo "Post-npm NPM=$(command -v npm 2>/dev/null || true) NPM_VSN=$(npm --version) ."
    }
}

# SMART MAKE -------------------------------------------------------------------

# NOTE caveat: it doesn't work properly if 'make' is already an alias|function
# shellcheck disable=SC2034
typeset -f make >/dev/null || function make() {
    # NOTE zsh would output "make is /path/to/make"
    local MAKE_COMMAND=$(type -a -p make | head -1 | sed "s|^make is ||")
    case "$1" in
        --help|--version)
            ${MAKE_COMMAND} "$@"
            return $?
            ;;
        *)
            ;;
    esac
    if [[ -z "${YP_MAKE_COMMAND:-}" ]] && [[ -x make.sh ]]; then
        [[ -f make.sh.successful ]] || {
            >&2 echo "$(date +"%H:%M:%S")" "[INFO] Running    ${PWD}/make.sh $*"
            >&2 echo "                instead of ${MAKE_COMMAND} $*"
        }
        YP_MAKE_COMMAND=${MAKE_COMMAND} ./make.sh "$@"
        local EXIT_STATUS=$?
        # รก la Ubuntu's ~/.sudo_as_admin_successful
        [[ ${EXIT_STATUS} -ne 0 ]] || touch make.sh.successful
        return ${EXIT_STATUS}
    fi
    ${MAKE_COMMAND} "$@"
}

# for when you want to skip ./make.sh
# NOTE caveat: it doesn't work properly if 'make' is already an alias|function
# shellcheck disable=SC2034
typeset -f make.bak >/dev/null || function make.bak() {
    # NOTE zsh would output "make is /path/to/make"
    local MAKE_COMMAND=$(type -a -p make | head -1 | sed "s|^make is ||")
    ${MAKE_COMMAND} "$@"
}

# MAIN -------------------------------------------------------------------------

yp::sourced || set -euo pipefail

YP_ENV_DIR="$(cd "$(dirname "$(yp::stacktrace_file)")/.." >/dev/null && pwd)"

# document exports
# NOTE exported variables need to be in sync with build.mk/core.common.mk:9
YP_ENV_EXPORTS=(
    HOMEBREW_PREFIX
    INFOPATH
    MANPATH
    NVM_DIR
    PATH
    YP_ENV
)

function yp-env-report() {
    yp::executed || {
        export "${YP_ENV_EXPORTS[@]}"
        unset -f yp-env-report
        unset YP_ENV_DIR
        unset YP_ENV_EXPORTS
        return 0
    }

    if [[ $# -eq 1 ]]; then
        eval "echo \${$1}"
    elif [[ $# -gt 1 ]]; then
        while [[ $# -gt 0 ]]; do
            eval "echo $1=\${$1}"
            shift
        done
    else
        for VAR in "${YP_ENV_EXPORTS[@]}"; do
            eval "echo ${VAR}=\${${VAR}:-}"
        done
    fi
}

[[ "${1:-}" != "--force" ]] || {
    unset YP_ENV
    shift
}

[[ "${YP_ENV:-}" != "${YP_ENV_DIR/bin/yp-env}" ]] || {
    if yp::sourced; then
        yp-env-report "$@" || return 1
        return 0
    else
        yp-env-report "$@"
        echo exit 0
    fi
}

hash -r # see https://github.com/Homebrew/brew/issues/5013
export YP_ENV=${YP_ENV_DIR}/bin/yp-env

[[ -z "${HOMEBREW_PREFIX:-}" ]] || [[ -f "${HOMEBREW_PREFIX:-}/bin/brew" ]] || {
    unset HOMEBREW_PREFIX
    unset HOMEBREW_CELLAR
    unset HOMEBREW_REPOSITORY
    unset HOMEBREW_SHELLENV_PREFIX
}

[[ -n "${HOMEBREW_PREFIX:-}" ]] || if [[ -x /home/linuxbrew/.linuxbrew/bin/brew ]]; then
    # linux with sudo
    export HOMEBREW_PREFIX=/home/linuxbrew/.linuxbrew
elif [[ -x ${HOME}/.linuxbrew/bin/brew ]]; then
    # linux without sudo
    export HOMEBREW_PREFIX=${HOME}/.linuxbrew
elif [[ -x /usr/local/bin/brew ]]; then
    # macos
    export HOMEBREW_PREFIX=/usr/local
elif [[ -x /opt/homebrew/bin/brew ]]; then
    # macos m1
    export HOMEBREW_PREFIX=/opt/homebrew
elif command -v brew >/dev/null 2>&1; then
    # misc
    export HOMEBREW_PREFIX=$(brew --prefix)
fi

# remove homebrew (linuxbrew) from PATH which is appended, not prepended (default homebrew behaviour)
# see https://github.com/actions/virtual-environments/pull/789
[[ "${GITHUB_ACTIONS:-}" != "true" ]] || [[ "${RUNNER_OS:-}" != "Linux" ]] || {
    export PATH=$(echo ":${PATH}:" | sed "s|:/home/linuxbrew/.linuxbrew/bin:|:|" | sed "s|::|:|")
    export PATH=$(echo ":${PATH}:" | sed "s|:/home/linuxbrew/.linuxbrew/sbin:|:|" | sed "s|::|:|")
    yp::path "${PATH}"
}

# jq becomes always available
# NOTE if needed to bypass system's jq, call yp-jq
yp::path_append ${YP_ENV_DIR}/bin/.jq

# jd becomes always available
# NOTE if needed to bypass system's jd, call yp-jd
yp::path_append ${YP_ENV_DIR}/bin/.jd

# nanoseconds becomes always available
# NOTE if needed to bypass system's nanoseconds, call yp-nanoseconds
yp::path_append ${YP_ENV_DIR}/bin/.nanoseconds

# yq becomes always available
# NOTE if needed to bypass system's yq, call yp-yq
yp::path_append ${YP_ENV_DIR}/bin/.yq

yp::path_prepend /usr/local/sbin
yp::path_prepend /usr/local/bin
yp::path_prepend ${HOME}/.local/sbin
yp::path_prepend ${HOME}/.local/bin

[[ -n "${NVM_DIR:-}" ]] || export NVM_DIR=${HOME}/.nvm

if [[ -n "${HOMEBREW_PREFIX:-}" ]]; then
    # 'brew shellenv' duplicates items in PATH variables
    eval "$(HOMEBREW_SHELLENV_PREFIX="" ${HOMEBREW_PREFIX}/bin/brew shellenv | grep -v \
        -e "^export PATH=" \
        -e "^export MANPATH=" \
        -e "^export INFOPATH=")"

    yp::path_prepend ${HOMEBREW_PREFIX}/sbin
    yp::path_prepend ${HOMEBREW_PREFIX}/bin

    # yp_manpath_prepend ${HOMEBREW_PREFIX}/share/man
    HOMEBREW_MANPATH=${HOMEBREW_PREFIX}/share/man
    echo ":${MANPATH:-}:" | grep -q ":${HOMEBREW_MANPATH}:" || export MANPATH=${HOMEBREW_MANPATH}:${MANPATH:-}
    export MANPATH=$(echo "${MANPATH}" | sed "s|^:||" | sed "s|:$||")

    # yp_infopath_prepend ${HOMEBREW_PREFIX}/share/info
    HOMEBREW_INFOPATH=${HOMEBREW_PREFIX}/share/info
    echo ":${INFOPATH:-}:" | grep -q ":${HOMEBREW_INFOPATH}:" || export INFOPATH=${HOMEBREW_INFOPATH}:${INFOPATH:-}
    export INFOPATH=$(echo "${INFOPATH}" | sed "s|^:||" | sed "s|:$||")

    for f in coreutils findutils gnu-sed gnu-tar gnu-time gnu-which grep gzip make; do
        yp::path_prepend ${HOMEBREW_PREFIX}/opt/${f}/libexec/gnubin
    done
    for f in curl gnu-getopt openssl@3 unzip zip; do
        yp::path_prepend ${HOMEBREW_PREFIX}/opt/${f}/bin
    done
    unset f

    # command is defined and is a function (no path)
    [[ "$(command -v nvm 2>&1 || true)" = "nvm" ]] || {
        NOUNSET_STATE="$(set +o | grep nounset)"
        set +u
        # using a less exact call because 'brew --prefix nvm' is very very slow
        # NVM_INSTALLATION_DIR=$(brew --prefix nvm 2>/dev/null || true)
        NVM_INSTALLATION_DIR=${HOMEBREW_PREFIX}/opt/nvm
        # shellcheck disable=SC1091
        [[ ! -r ${NVM_INSTALLATION_DIR}/nvm.sh ]] || source ${NVM_INSTALLATION_DIR}/nvm.sh --no-use
        unset NVM_INSTALLATION_DIR
        eval "${NOUNSET_STATE}"
        unset NOUNSET_STATE
    }

    # command is defined and is a function (no path)
    [[ "$(command -v asdf 2>&1 || true)" = "asdf" ]] || [[ -n "${ASDF_DIR:-}" ]] || {
        NOUNSET_STATE="$(set +o | grep nounset)"
        set +u
        # using a less exact call because 'brew --prefix asdf' is very very slow
        # ASDF_INSTALLATION_DIR=$(brew --prefix asdf 2>/dev/null || true)
        ASDF_INSTALLATION_DIR=${HOMEBREW_PREFIX}/opt/asdf
        # shellcheck disable=SC1091
        [[ ! -r ${ASDF_INSTALLATION_DIR}/asdf.sh ]] || source ${ASDF_INSTALLATION_DIR}/asdf.sh
        eval "${NOUNSET_STATE}"
        unset NOUNSET_STATE
    }
fi

[[ -z "${ASDF_DIR:-}" ]] || {
    # user a hardcoded value for performance
    # yp::path_prepend "$(${YP_ENV_DIR}/bin/asdf-get-asdf-bin)"
    # yp::path_prepend "$(${YP_ENV_DIR}/bin/asdf-get-asdf-user-shims)"
    yp::path_prepend "${ASDF_DIR}/bin"
    yp::path_prepend "${ASDF_DATA_DIR:-${HOME}/.asdf}/shims"
}

[[ -z "${NVM_BIN:-}" ]] || {
    # user a hardcoded value for performance
    # yp::path_prepend "$(${YP_ENV_DIR}/bin/nvm-get-nvm-bin)"
    yp::path_prepend "${NVM_BIN}"
}

yp-env-report "$@"
